// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageQueueVCClient is the client API for MessageQueueVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageQueueVCClient interface {
	Enqueue(ctx context.Context, in *MessageVC, opts ...grpc.CallOption) (*EnqueueReply, error)
}

type messageQueueVCClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageQueueVCClient(cc grpc.ClientConnInterface) MessageQueueVCClient {
	return &messageQueueVCClient{cc}
}

func (c *messageQueueVCClient) Enqueue(ctx context.Context, in *MessageVC, opts ...grpc.CallOption) (*EnqueueReply, error) {
	out := new(EnqueueReply)
	err := c.cc.Invoke(ctx, "/MessageQueueVC/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageQueueVCServer is the server API for MessageQueueVC service.
// All implementations must embed UnimplementedMessageQueueVCServer
// for forward compatibility
type MessageQueueVCServer interface {
	Enqueue(context.Context, *MessageVC) (*EnqueueReply, error)
	mustEmbedUnimplementedMessageQueueVCServer()
}

// UnimplementedMessageQueueVCServer must be embedded to have forward compatible implementations.
type UnimplementedMessageQueueVCServer struct {
}

func (UnimplementedMessageQueueVCServer) Enqueue(context.Context, *MessageVC) (*EnqueueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedMessageQueueVCServer) mustEmbedUnimplementedMessageQueueVCServer() {}

// UnsafeMessageQueueVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageQueueVCServer will
// result in compilation errors.
type UnsafeMessageQueueVCServer interface {
	mustEmbedUnimplementedMessageQueueVCServer()
}

func RegisterMessageQueueVCServer(s grpc.ServiceRegistrar, srv MessageQueueVCServer) {
	s.RegisterService(&MessageQueueVC_ServiceDesc, srv)
}

func _MessageQueueVC_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageVC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageQueueVCServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageQueueVC/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageQueueVCServer).Enqueue(ctx, req.(*MessageVC))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageQueueVC_ServiceDesc is the grpc.ServiceDesc for MessageQueueVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageQueueVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageQueueVC",
	HandlerType: (*MessageQueueVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _MessageQueueVC_Enqueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VectorialClockService.proto",
}
