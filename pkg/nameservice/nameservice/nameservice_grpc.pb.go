// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nameservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServiceClient interface {
	CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	CreateGroup(ctx context.Context, in *NewGroup, opts ...grpc.CallOption) (*Group, error)
	JoinGroup(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Group, error)
	GetAddress(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	GetGroupAddresses(ctx context.Context, in *Group, opts ...grpc.CallOption) (NameService_GetGroupAddressesClient, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) CreateUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/NameService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) CreateGroup(ctx context.Context, in *NewGroup, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/NameService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) JoinGroup(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/NameService/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) GetAddress(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/NameService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) GetGroupAddresses(ctx context.Context, in *Group, opts ...grpc.CallOption) (NameService_GetGroupAddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NameService_ServiceDesc.Streams[0], "/NameService/GetGroupAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &nameServiceGetGroupAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NameService_GetGroupAddressesClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type nameServiceGetGroupAddressesClient struct {
	grpc.ClientStream
}

func (x *nameServiceGetGroupAddressesClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameServiceServer is the server API for NameService service.
// All implementations must embed UnimplementedNameServiceServer
// for forward compatibility
type NameServiceServer interface {
	CreateUser(context.Context, *NewUser) (*User, error)
	CreateGroup(context.Context, *NewGroup) (*Group, error)
	JoinGroup(context.Context, *JoinRequest) (*Group, error)
	GetAddress(context.Context, *UserId) (*User, error)
	GetGroupAddresses(*Group, NameService_GetGroupAddressesServer) error
	mustEmbedUnimplementedNameServiceServer()
}

// UnimplementedNameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameServiceServer struct {
}

func (UnimplementedNameServiceServer) CreateUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedNameServiceServer) CreateGroup(context.Context, *NewGroup) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedNameServiceServer) JoinGroup(context.Context, *JoinRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedNameServiceServer) GetAddress(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedNameServiceServer) GetGroupAddresses(*Group, NameService_GetGroupAddressesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroupAddresses not implemented")
}
func (UnimplementedNameServiceServer) mustEmbedUnimplementedNameServiceServer() {}

// UnsafeNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServiceServer will
// result in compilation errors.
type UnsafeNameServiceServer interface {
	mustEmbedUnimplementedNameServiceServer()
}

func RegisterNameServiceServer(s grpc.ServiceRegistrar, srv NameServiceServer) {
	s.RegisterService(&NameService_ServiceDesc, srv)
}

func _NameService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).CreateUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).CreateGroup(ctx, req.(*NewGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameService/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).JoinGroup(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).GetAddress(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_GetGroupAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Group)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NameServiceServer).GetGroupAddresses(m, &nameServiceGetGroupAddressesServer{stream})
}

type NameService_GetGroupAddressesServer interface {
	Send(*User) error
	grpc.ServerStream
}

type nameServiceGetGroupAddressesServer struct {
	grpc.ServerStream
}

func (x *nameServiceGetGroupAddressesServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// NameService_ServiceDesc is the grpc.ServiceDesc for NameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _NameService_CreateUser_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _NameService_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _NameService_JoinGroup_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _NameService_GetAddress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGroupAddresses",
			Handler:       _NameService_GetGroupAddresses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nameservice.proto",
}
